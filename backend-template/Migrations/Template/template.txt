down: migrationBuilder.Sql(@"
              DROP TRIGGER IF EXISTS refresh_product_ratings ON reviews;
              DROP FUNCTION IF EXISTS refresh_product_ratings;
              DROP MATERIALIZED VIEW IF EXISTS product_ratings;
          ");
          
up: migrationBuilder.Sql(@"
            CREATE MATERIALIZED VIEW product_ratings AS
            SELECT product_id,
                   COUNT(*) FILTER (WHERE rating = 1) AS one_star,
                   COUNT(*) FILTER (WHERE rating = 2) AS two_stars,
                   COUNT(*) FILTER (WHERE rating = 3) AS three_stars,
                   COUNT(*) FILTER (WHERE rating = 4) AS four_stars,
                   COUNT(*) FILTER (WHERE rating = 5) AS five_stars,
                   COUNT(*)                           AS total_reviews,
                   ROUND(AVG(rating), 2)              AS average_rating
            FROM reviews
            GROUP BY product_id;
    
            CREATE FUNCTION refresh_product_ratings()
                RETURNS TRIGGER
                LANGUAGE plpgsql AS
            $$
            BEGIN
                REFRESH MATERIALIZED VIEW product_ratings;
                RETURN NULL;
            END;
            $$;
    
            CREATE TRIGGER refresh_product_ratings
                AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE
                ON reviews
                FOR EACH STATEMENT
            EXECUTE FUNCTION refresh_product_ratings();
    
            CREATE INDEX ON reviews (product_id);
            CREATE INDEX ON reviews (user_id);
        ");
        
SQL: INSERT INTO users (email, display_name, password_hash, password_changed_at)
     VALUES
         ('john.doe@example.com', 'John Doe', '$2a$12$yQIoX.KX/ihJVsJMg3/mKeXyuvG.AMDK4yBjvDbsfpBjGx/Z9UNHS', NOW()),
         ('jane.smith@example.com', 'Jane Smith', '$2a$12$Vx.L8ZMXA3P8pEelS/nVuOYH6aUmwAvYEvZoG3J7xBfWXh5l4QnUO', NOW()),
         ('alice.wonder@example.com', 'Alice Wonder', '$2a$12$Il/VX/zxnQ9FE7Gx4nZ17OcC45O7b3CUJlDSuoQ6qR4In3m5rvT8K', NOW()),
         ('bob.builder@example.com', 'Bob Builder', '$2a$12$q9HvOVZVqcWXQO44E0txwOc9k98T0ESxzJzjwb4IINZhL2mQgKvJW', NOW()),
         ('charlie.brown@example.com', 'Charlie Brown', '$2a$12$r4IqlMWF7J.JXAoedJG91OqIYcqJ.88gWEtQq7N5SRMfUs3Z8UNtW', NOW());
     
     
     INSERT INTO reviews (product_id, user_id, created_at, comment, rating)
     VALUES
         -- Produkt 1 Bewertungen
         (1, 1, NOW() - INTERVAL '5 days', 'Great product, highly recommend!', 5),
         (1, 2, NOW() - INTERVAL '4 days', 'Good value for money.', 4),
         (1, 3, NOW() - INTERVAL '3 days', 'Average quality, but works.', 3),
         (1, 4, NOW() - INTERVAL '2 days', 'Excellent! Will buy again.', 5),
         (1, 5, NOW() - INTERVAL '1 day', 'Satisfied with the purchase.', 4),
     
         -- Produkt 2 Bewertungen
         (2, 1, NOW() - INTERVAL '7 days', 'Terrible experience, do not buy.', 1),
         (2, 2, NOW() - INTERVAL '6 days', 'Not as described, disappointed.', 2),
         (2, 3, NOW() - INTERVAL '5 days', 'Okay, but could be better.', 3),
         (2, 4, NOW() - INTERVAL '4 days', 'Meh, not great.', 2),
         (2, 5, NOW() - INTERVAL '3 days', 'Poor quality, not worth it.', 1),
     
         -- Produkt 3 Bewertungen
         (3, 1, NOW() - INTERVAL '10 days', 'Absolutely love it!', 5),
         (3, 2, NOW() - INTERVAL '9 days', 'Fantastic product, exceeded expectations.', 5),
         (3, 3, NOW() - INTERVAL '8 days', 'Pretty good for the price.', 4),
         (3, 4, NOW() - INTERVAL '7 days', 'Works perfectly, no issues.', 5),
         (3, 5, NOW() - INTERVAL '6 days', 'Very happy with this product.', 5);